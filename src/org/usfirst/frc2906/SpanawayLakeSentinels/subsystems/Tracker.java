// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2906.SpanawayLakeSentinels.subsystems;

import org.usfirst.frc2906.SpanawayLakeSentinels.Robot;
import org.usfirst.frc2906.SpanawayLakeSentinels.RobotMap;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Tracker extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOT+BUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   
	Encoder testEncoder = RobotMap.testEncoder;
	Encoder encoder = RobotMap.encoder;
   
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	
    }
    
	
	public void setZero(){
		testEncoder.reset();
	}
	public int blackberry(){
		return testEncoder.get();
	}
	
	public int testRotation(){
		return testEncoder.get();
	}
	
	public void armTracker(){
		if(blackberry() < 4){
			Robot.armDrive.autoStop();
		}
	}
	public void autoArm(){
		if(blackberry()<= 2 ){
			Robot.armDrive.autoRaise();
		}
		//if(blackberry() > 2){
		//	Robot.armDrive.autoStop();
		//}
		else Robot.armDrive.autoStop();
	}
	public void armScale(){
		Robot.armDrive.toFire();
		if(blackberry()==275){
			Robot.armDrive.armIdle();
		}
		Timer.delay(10);
		Robot.armDrive.armUp(); 
	}
	
	public void testEncoderRun(){
		testEncoder.reset();
		while (RobotMap.testEncoder.getDistance() < 10){
			Robot.testBenchMotor.runTestMotor();
		}
	}
	
}

