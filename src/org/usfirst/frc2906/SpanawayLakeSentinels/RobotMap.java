 
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



package org.usfirst.frc2906.SpanawayLakeSentinels;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.CameraServer;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Relay testSpike;
    public static SpeedController driveTrainRight;
    public static SpeedController driveTrainLeft;
    public static RobotDrive driveTrainRobotDrive21;
    public static SpeedController rotation;
    public static Compressor pneumaticsCompressor1;
    public static DoubleSolenoid ballFire;
    public static Solenoid testPiston1;
    public static Solenoid testPiston2;
    public static Encoder encoder;
    public static Encoder testEncoder;
    public static Encoder encoderRight;
    public static Encoder encoderLeft;
    public static SpeedController wheelsRight;
    public static SpeedController wheelsLeft;
    public static SpeedController testBenchMotor;
    public static final double sensitivity = 0.1;
    public static final double upArm = 0.05;
    public static final double downArm = .30;
    public static final double idleArm = 0.1;
    public static final double stopArm = 0;
    public static final double leftoutBall = 1.0;
    public static final double rightoutBall = -1.0;
    public static final double rightinBall = 0.75;
    public static final double leftinBall = -0.75;
    public static final double stopBall = 0;
    public static final double powerLow = .3;
    public static final double shootingPosition = .7;
    
    
    
    public static CameraServer camera;
	public static double maxPeriod = 0.1;
	public static int minRate = 10;
	public static double distanceperPulse = (6.0/* in */ * Math.PI) / (360.0 * 12.0/* in/ft */);
	public static double rpmsperPulse = /**/(Math.PI);
	public static double calculatedDriveGearRatio = ((50/14)*(48/16));
	public static double outputDriveGearRatio = (10.71/1);
	public static int samplestoAverage = 7;
	
    
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	//Electrical tape coloring in relation to PWM Port
    	int green = 0;
    	int orange = 1;
    	int black = 2;
    	int red = 3;
    	int silver = 4;
    	int yellow = 0;
    	
        driveTrainRight = new Talon(green);
        LiveWindow.addActuator("Drive Train", "Right", (Talon) driveTrainRight);
        
        driveTrainLeft = new Talon(orange);
        LiveWindow.addActuator("Drive Train", "Left", (Talon) driveTrainLeft);
        
        wheelsLeft = new Talon(black);
        LiveWindow.addActuator("Wheels", "Left", (Talon) wheelsLeft);
        
        wheelsRight = new Talon(red);
        LiveWindow.addActuator("Wheels", "Right", (Talon) wheelsRight);
        
        rotation = new Talon(silver);
        LiveWindow.addActuator("armDrive", "Right", (Talon) rotation);
        
        testSpike = new Relay(yellow);
        
        ballFire = new DoubleSolenoid(1, 2);
        LiveWindow.addActuator("Pneumatics", "Double Solenoid 1", ballFire);
        
        testPiston1 = new Solenoid(4);
        LiveWindow.addActuator("testSole1", "Single Sole 1", testPiston1);
        
        testPiston2 = new Solenoid(5);
        LiveWindow.addActuator("testSole2", "Single Sole 2", testPiston2);
        
        testBenchMotor = new Talon(5);
        LiveWindow.addActuator("testBench", "Left", (Talon) testBenchMotor);
        
        
        
        /*If encoder ports are the same you WILL GET A RED COMM LIGHT ON THE ROBORIO!!!*/
        
         encoder = new Encoder(0, 1, true, Encoder.EncodingType.k4X);
         encoder.setPIDSourceType(PIDSourceType.kDisplacement);
         encoder.setDistancePerPulse(distanceperPulse);
         encoder.reset();
         LiveWindow.addSensor("testBenchMotor", "Encoder", encoder);
         
         encoderRight = new Encoder(2, 3, true, Encoder.EncodingType.k4X);
         encoderRight.setPIDSourceType(PIDSourceType.kDisplacement);
         encoderRight.setDistancePerPulse(distanceperPulse);
         encoderRight.setSamplesToAverage(samplestoAverage);
         encoderRight.reset();
         
         encoderLeft = new Encoder(4, 5, false, Encoder.EncodingType.k4X);
         encoderLeft.setPIDSourceType(PIDSourceType.kDisplacement);
         encoderLeft.setDistancePerPulse(distanceperPulse);
         encoderLeft.setSamplesToAverage(samplestoAverage);
         encoderLeft.reset();
         
         
         testEncoder = new Encoder(6, 7, true, Encoder.EncodingType.k2X);
         testEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
         testEncoder.setDistancePerPulse(distanceperPulse);
         testEncoder.setSamplesToAverage(samplestoAverage);
         testEncoder.reset();
         LiveWindow.addSensor("testBenchMotor", "Encoder", testEncoder);
         SmartDashboard.putNumber("This is a test encoder value", testEncoder.get());
         
         SmartDashboard.putNumber("calculatedDriveGearRatio", calculatedDriveGearRatio);
         SmartDashboard.putNumber("DriveGearRatio", outputDriveGearRatio);
         
        
        driveTrainRobotDrive21 = new RobotDrive(driveTrainLeft, driveTrainRight);
        driveTrainRobotDrive21.setSafetyEnabled(false);
        driveTrainRobotDrive21.setExpiration(0.1);
        driveTrainRobotDrive21.setSensitivity(0.15);
        driveTrainRobotDrive21.setMaxOutput(1);
        driveTrainRobotDrive21.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
     
        
        
        
        pneumaticsCompressor1  = new Compressor(0);
       
        
        
        CameraServer server = CameraServer.getInstance();
        server.startAutomaticCapture();
        


       

   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    public Encoder getTestEncoder(){
    	return testEncoder;
    }
    
    public Encoder getEncoder(){
    	return encoder;
    }
    
    public Encoder getEncoderRight(){
    	return encoderRight;
    }
    
    public Encoder geetEncoderLeft(){
    	return encoderLeft;
    }
    
}
